# License Key
license.user=Anonymous Download
license.modules=gsm ucp cimd2 smpp mm7
license.serial-nr=20170210
license.version=2.3.3
license.type=TRIAL LICENSE
license.not-before=1651824
license.not-after=1654752
license.comments=Trial license Key valid untill 2017-03-12. For evaluation purposes only.
license.sig=HCd2xpoT1zbgXsRMY/gXTM5WSisGWYo8Gr1DnU/TFhbG3LaSgbYQxWdAlQBvSbAtvw8YrYD+6oZgR8c8HcD8Qw==

#######################
#   Common Settings   #
#######################

// The interval (in seconds) in which the connection is verified (default 60), 0 = no verify
#sms.keepalive.interval=0

// Communication timeout (default 10000ms).
#sms.connector.timeout=30000

// Set this property to "true" if keep-alive should automatically disconnect the service 
// when the connection to the SMSC/GSM device is dead.
#sms.keepalive.disconnects=true

##################
#   GSM Service  #
##################

// Type of GSM Connector (SERIAL or IP, defaults to SERIAL)
#sms.gsm.connector=SERIAL

// Number of seconds to wait for GSM device to become ready for SMS send/receive (default: 1sec)
// Use a higher value for devices using a WISMO chipset (e.g. Wavecom)
#sms.gsm.inittime=30

// Wait for sucessful network registration when initializing the device 
// (default: false)
#sms.gsm.waitfornet=true

// Network registration check interval in milliseconds. Only applies 
// if sms.gsm.waitfornet is enabled. Defaults to 1000.
#sms.gsm.waitfornet.interval=1000

// Activate this property if your GSM device doesn't support delivering messages
// asynchronously.
#sms.receive.poll_interval=2000

// PIN code stored within your SIM card (May be null)
#sms.pin=<your_pin>
// PUK code (if SIM is locked due to wrong PIN)
#sms.puk=<your_puk>

// Prefered message store for incoming messages ("SM" (SIM memory), "ME" (Phone memory)). 
// If unset, jSMS uses the device's default setting.
#sms.gsm.storage="SM"

// If this property is set to "false", jSMS will NOT try to read unread messages 
// from the device when SmsService#startReceiving() is called. (default: true)
#sms.gsm.receive.unreadmsg=false

// Set this to true, if your GSM device doesn't respond to AT+CPIN? with a final "OK".
// If unset, jSMS uses the modem's vendor/model information to determine the
// AT+CPIN? behaviour
#sms.gsm.cpin.etsi=true

// Set this to true, if your GSM device supports GPRS and you want to send SMS
// over GRPS. This should increase send performance. 
#sms.gsm.gprs=false

// Override default modem init string with a custom init sequence. If unset, jSMS
// will reset the modem using the  AT command "ATZ". Multiple AT commands can
// be appended on the same line, e.g. ATZ S0=0 S7=45 L1 V1
#sms.gsm.initstring=

// Setting this property to "true" results in jSMS checking the connection
// to the GSM device before sending a SMS. If the check fails, the GsmSmsService 
// will either broadcast a DEVICE_NOT_RESPONDING event to all registered event 
// handlers (if the init property "keepalive.disconnects" is false) or disconnect 
// itself from the device by calling disconnect(). Defaults to false.
#sms.gsm.checkonsend=true

# --- Parameters for the SERIAL connector ---

// Name of port to use (e.g. COM3)
connector.serial.port=COM3
// Baud rate to use (Defaults to 9600)
#connector.serial.bps=9600
// Data bits (5,6,7,8, default: 8)
#connector.serial.databits=8
// Parity (N, E, M, O, S, default: N)
#connector.serial.parity=N
// Stop bit(s) (1,15,2, default: 1)
#connector.serial.stopbits=1

// Flow - control. Can be a (space or comma separated) combination of
//   NONE: no flow control
//   RTSCTS_IN: RTS/CTS (hardware) flow control for input
//   RTSCTS_OUT: RTS/CTS (hardware) flow control for output
//   XONXOFF_IN: XON/XOFF (software) flow control for input
//   XONXOFF_OUT: XON/XOFF (software) flow control for output
//   default: RTSCTS_IN
//   (e.g. RTSCTS_IN RTSCTS_OUT XONXOFF_IN XONXOFF_OUT)
#connector.serial.flowctrl=RTSCTS_IN RTSCTS_OUT

// Sets or clears the DTR (Data Terminal Ready) bit in the UART,
// if supported by the underlying implementation of the java COMMUNICATION API
// (default: not invoked)
#connector.serial.DTR=SET | CLEAR

// Sets or clears the RTS (Request To Send) bit in the UART, 
// if supported by the underlying implementation of the java COMMUNICATION API
// (default: not invoked)
#connector.serial.RTS=SET | CLEAR


// --- Parameters for the TCP connector --- 

// IP-Adress and Port number of the terminal server that provides the connection to the GSM device
#connector.tcp.host=127.0.0.1
#connector.tcp.port=1998



####################
#   UCP Settings   #
####################
// Type of connection (TCP | SERIAL)
ucp.connector=SERIAL

// Modem initialization String (only used if connector is SERIAL, 
// defaults to ATZ\nATQ0V1\n)
#ucp.initstring=

// Sender address
#ucp.sender=<your_phone_number>

// International prefix (replaces '+' in phone numbers, defaults to 00)
#ucp.intprefix=19

// UCP operation for submitting a message (default is 51)
// Set to 30 or 01 when 51 is not supported
#ucp.submit.operation=30

// Large Volume Account (Default=false, set to true for UCP over TCP/IP)
#ucp.lva=<true|false>

// Windowing size to use. (Defaults to 1 (Windowing disabled))
#ucp.window.size=1

/* Serial connector settings */
#ucp.smsc.number=<the phone number of your smsc>
#ucp.port.name=COM1
#ucp.port.bps=9600
#ucp.port.databits=8
#ucp.port.parity=N
#ucp.port.stopbits=1
#ucp.port.flowcontrol=RTSCTS

// UCP over TCP settings
#ucp.tcp.send.host=<ip-address/hostname>
#ucp.tcp.send.port=<port-number>

// Receiving connection (if not set, the send connection
// defined above will be used for receiving)
#ucp.tcp.receive.host=<ip-address/hostname>
#ucp.tcp.receive.port=<port-number>

# Local address and port. Can be used to bind jSMS to a local
# IP-Address and Port
#ucp.tcp.localaddr=<local address to bind>
#ucp.tcp.localport=<local port to bind>


# Login (short ID) and password for UCP over TCP/IP (Large account)
#ucp.shortid=<your short id>
#ucp.password=<your password>
#ucp.opid=<operation id> (default is empty, known possible values are: 00 = Mobile Station, 39 = PC Application)

# If setting this property to "true", jSMS will not encode the Data Coding 
# Scheme (DCS) as a XSer field for outgoing short messages
#ucp.xser.nodcs=<false>

######################
#   CIMD2 Settings   #
######################

// Type of connection to the SMSC: Use SERIAL for Modem connections, 
// TCP for TCP/IP connections. Default: TCP.
#cimd2.connector=TCP

// Windowing size to use. (Defaults to 1 (Windowing disabled))
#cimd2.window.size=1

// CIMD2 Login
cimd2.login=myaccount

// CIMD2 password
cimd2.password=mypassword

// Type of receiver. Possible values are "query", "receive" or
// "send-only", where "send-only" is the default.
#cimd2.sme.type=receive

// Incoming messages: polling interval in seconds (defaults to 1 sec). Used
// only if cimd2.sme.type=query
#cimd2.poll.interval=5

// Status Report parameter to use (defaults to 62 if unset). See Java API documentation
// on class Cimd2SmsService for more information about possible values.
#cimd2.statusreport.parameter=62


#       --- Settings for the TCP Connector ---
// Hostname / IP-Address of the CIMD2 Gateway (mandatory)
cimd2.host.address=

// CIMD2 gateway port (mandatory)
cimd2.host.port=

// Local address to bind to (optional)
#cimd2.local.address=

// Local port to bind to (optional)
#cimd2.local.port=

#       --- Settings for the SERIAL Connector ---
// Phone number of your SMSC. This number will be dialed when 
// establishing a modem connection to your CIMD2 SMSC. (mandatory)
cimd2.smsc.number=

// Name of the serial port where your modem is connected (e.g. COM1) (mandatory).
cimd2.serial.port=/dev/ttyS0

// Port speed (bits per second), If unset, 9600 will be used.
#cimd2.serial.bps=19200

// Number of data bits (5,6,7,8). Defaults to 8.
#cimd2.serial.databits=8

// Parity (NONE, ODD, EVEN, MARK, SPACE), Defaults to NONE
#cimd2.serial.parity=NONE

// Number of stop bits (1, 1.5, 2). Defaults to 1 
#cimd2.serial.stopbits=1

// Flow Control (NONE, RTSCTS, XONXOFF), Defaults to NONE
#cimd2.serial.flowcontrol=NONE

// Modem init string (defaults to ATZ\nATQ0V1E0\n)
#cimd2.serial.initstring=ATZ\n

####################
#   SMPP Service   #
####################
// SMSC address in the format 'address:port', e.g. 'smsc.xyz.org:1234'
smpp.smsc.address=<address:port>

// Identification on SMSC
smpp.login=<user>
#smpp.password=<password>

// Local address to bind in the format 'address:port'
#smpp.local.address=<address:port>

// Type of SMPP BIND operation. Possible values: receiver, transmitter, transceiver (default)
#smpp.bind.operation=<receiver|transmitter|transceiver>

// categorize type of ESME that is binding to the SMSC
#smpp.system.type=

// This parameter is used to indicate the version of the SMPP protocol. (Defaults to 0x34)
#smpp.interface.version=0x33

// Indicates Type of Number of the ESME address used for the BIND operation
#smpp.addr.ton=<0...6>

// Numbering Plan Indicator for ESME address used for the BIND operation
#smpp.addr.npi=<0|1|3|4|6|8|9|10|14|18>

// used in the bind_receiver and bind_transceiver command to specify
// a set of SME addresses serviced by the ESME client.
#smpp.addr.range=

// Keepalive interval in seconds. Set to 0 to turn off keep-alive
#smpp.keepalive.interval=

// Communication timeout in milliseconds (defaults to 10000ms)
#smpp.connector.timeout=

// Delivery Receipt format for SMPP Interface Version <= 0x34. Use this property to 
// specify the format of incoming delivery receipts (Status Reports). The default 
// format is "id:{0} sub:{1} dlvrd:{2} submit date:{3} done date:{4} stat:{5} err:{6} text:{7}"
// Make sure the attribute number in the specified format match to the numbers of the default
// attribute numbers. E.g.:
// "id:{0} your_name_for_the_submit_date:{3} done date:{4} stat:{5} err:{6} text:{7}"
#smpp.status.format=

// SMPP Message Mode to use. Possible Values are: "Default", "StoreAndForward", 
// "Datagram" and "Transaction". If unset, the default MC Mode will be used.
#smpp.message.mode=Transaction

// Character Set (Encoding) to use for communicating with the SMSC. 
// If unset, the default encoding of your VM will be used. If smpp.smsc.charset
// is set to "GSM", jSMS will convert text messages to the GSM default 7 bit alphabet.
// Ask your SMPP SMSC provider for the correct encoding to use. 
#smpp.smsc.charset=GSM

// SMPP data_coding to use for text messages. If unset, jSMS uses the 
// GSM DCS (Data coding scheme) "as-is" for the data_coding field.  If this property 
// is set, jSMS will encode the message class and the MWI indications as optional 
// parameters to the SMPP submit operation. Consult your SMPP provider and the SMPP-
// and GSM-03.38 specifications for more information about the DCS and data_coding
// parameters. Please note that for UCS2 and binary messages, jSMs will override
// this setting and use the SMPP-data_coding values for 8-bit binary data (0x04)
// or UCS2 (0x08).
#smpp.data.coding=0x0

// Specify if text messages should be 7-bit packed/unpacked.
// Packing will only be done if the character set in use (smpp.smsc.charset)
// is set to "GSM". Please note that packing will not be applied to
// 8-bit or Unicode (UCS) messages. Chances are high that you must
// also set the "smpp.data.coding" property to 0 (SMSC Default
// Alphabet) to prevent your SMSC from converting the message. 
// Default value: "false". 
#smpp.gsm.packing=true

// Most SMPP SMSC's return the ID for a sent message as an integer with radix 10 and leading
// zeros, but for status reports, they use radix 16 (hex-values). If smpp.id.quirks is
// enabled ("true"), jSMS tries to make sure that those IDs match by converting them to a common base.
// By default, this property is enabled. Set it to "false" to turn this feature off.
#smpp.id.quirks=false

// Specify if certain characters from the extended GSM alphabet should be escaped using
// a "<ESC>char" sequence (e.g. the character '[' will be converted to '<ESC>(').
// This property has no influence if the SMSC charset is set to "GSM". Default value: "true"
#smpp.escape.special=false

// When this property is set to "true", jSMS converts the GSM Message
// class for outgoing messages to the corresponding SMPP "dest_addr_subunit" 
// parameter. Default value is "true". Set it to "false" to turn this feature off.
#smpp.dest_addr_subunit="false"

// Windowing size to use. (Defaults to 1 (Windowing disabled))
#smpp.window.size=1

// When this property is set to false, jSMS does not issue an SMPP UNBIND
// operation if an I/O Exception occurs while receiving data from the SMSC.
#smpp.unbind.on.ioe=true

####################
#   TAP Settings   #
####################
// Phone number of the TAP Gateway
tap.smsc.number=
 
// name of the serial port where your modem / ISDN adapter is attached (e.g. "COM3") 
tap.port.name=COM3
  
// Port speed (baud rate) 
tap.port.bps=9600
  
// Number of databits (5,6,7,8) 
tap.port.databits=8
  
// Parity ("NONE","ODD","EVEN", "MARK","SPACE") 
tap.port.parity=NONE
  
// Stop bits (1,15,2) 
tap.port.stopbits=1
  
// Flow-Control ("RTSCTS", "XONXOFF", "NONE") 
tap.port.flowcontrol=NONE
  
// Login name (if required by tap gateway) 
#tap.login=
  
// Default message sender address 
#tap.sender=

// Modem initialization String (defaults to ATZ\nATQ0V1\n)
#tap.initstring=

####################
#   SMTP Service   #
####################
smtp.host=mailhost
smtp.sender=yourname@yourdomain.com
smtp.subject=default subject
smtp.domain=yourdomain.com


####################################
#      MMS settings                #
####################################
// The MMS settings are provided by your local MMS provider. Usually you
// can find the settings required for connecting to the MMS Relay/Server at your providers
// website. The same settings that are used for configuring MMS for your mobile
// phone can be used with jSMS.
// 
// If the default.service property is set, the MMSServiceFactory will
// use the prefix "mms.[name]." when looking for the service configuration.
// If no default service is specified, the factory will use the
// prefix "mms.".
#mms.default.service=

//--------------------------------------------|
// Protocol related configuration settings    |
//--------------------------------------------|

###### MM1 Settings ######
mms.protocol.name=MM1
// URL of the MMS Relay/Server homepage (eg. http://mymmsc/mms/)
mms.protocol.mm1.mmsc.url=

// IP address of the MMS Relay/Server gateway
// The address may be appended by the port (e.g. 192.168.0.1:9181)
// If the port is not specified, it defaults to 9201.
mms.protocol.mm1.wapgateway=

// Indication whether or not the sending of delivery report is allowed. Default is [true].
// Set it to false if you do not want to send a report to the sender after you fetched the MMS.   
#mms.protocol.mm1.report.allowed=true

// This setting can be used to configure if jSMS should fetch MMS messages
// using the "Delayed Retrieval" Transaction flow. If unset, messages will
// be fetched using the "Immediate Retrieval" Transaction flow. Allowed
// values: "true", "false". Default is "false".
#mms.protocol.mm1.delayed.retrieval=true

// This setting determines how many times fetching a MMS should be retried
// in case of the MMSC responding with "Server Error" (status code 5xx).
// Defaults to 3. Set to 0 to prevent jSMS from retrying to fetch.
#mms.protocol.mm1.retries.on.server.error=2

// Timeout in seconds for connecting to the WAP gateway. Default: 30 sec.
#mms.protocol.mm1.timeout.login=30

// Timeout in seconds for sending a MMS message. Default: 300 sec.
#mms.protocol.mm1.timeout.send=300

// Timeout in seconds for fetching a MMS message. Default: 300 sec.
#mms.protocol.mm1.timeout.fetch=300

// User-Agent used when connecting to the WAP gateway. Defaults to "jSMS/2.1"
#mms.protocol.mm1.user.agent=MyUserAgent/1.0

// MMS Encapsulation Version to use. Allowed values: 1.0, 1.1, 1.2. If unset,
// Outgoing messages are encoded according to MMS version 1.1. Please note
// that for outgoing messages, attributes not supported by the specified
// protocol version are silently ignored.
#mms.protocol.mm1.version=1.1


###### MM7 settings ######

#mms.protocol.name=MM7

// MM7 protocol version to use (defaults to 6.8.0). Have a look at the
// API documentation of com.objectxp.mms.protocol.MM7Service to see
// the list of supported versions.
#mms.protocol.mm7.version=5.3.0

// VASP (Value Added Service Provider) ID
#mms.protocol.mm7.vasp.id=

// VAS (Value Added Service) ID
#mms.protocol.mm7.vas.id=

// URL of the MM7 MMSC. This is the URL that jSMS will use for outgoing
// messages (e.g. http://your.mm7.provider.net:1234/MM7)
mms.protocol.mm7.out.url=

// Username and password required by the MMSC when sending messages (optional)
#mms.protocol.mm7.out.username=username
#mms.protocol.mm7.out.password=password

// Set this property to a port or ip-address/port combination if you want
// to enable the embedded HTTP(S) server for MMS reception. When specifying
// an IP address, the HTTP(S) server will only listen on the given address.
// If unset, the server will listen on all network interfaces.
// Please notice that you must add jetty (http://jetty.mortbay.org) to your 
// classpath.
#mms.protocol.mm7.listen=8080

// This is the path component of the URL for incoming  messages / reports 
// from the MM7 MMSC. If unset, the path defaults to /
#mms.protocol.mm7.in.path=/incoming/

// Turn on HTTPS (SSL) for the embedded HTTP(S) server
#mms.protocol.mm7.in.ssl=true

// Require certificate based client authentication from the MM7 MMSC.
// SSL must be enabled (optional)
#mms.protocol.mm7.in.ssl.clientauth=true

// Username and password required from the MMSC when receiving messages (optional)
#mms.protocol.mm7.in.username=
#mms.protocol.mm7.in.password=

//--------------------------------------------|
// Transport related configuration settings   |
//--------------------------------------------|
//
// Define the Transport layer which should be used for sending/receiving MMS.
// 
// For GPRS connections use "com.objectxp.mms.transport.PPPDialup"
//
// If the MMSC is directly reachable over TCP/IP, use  
// "com.objectxp.mms.transport.DirectConnection"
//
mms.transport.class=com.objectxp.mms.transport.PPPDialup
#mms.transport.class=com.objectxp.mms.transport.DirectConnection

// Number of seconds to wait for the GPRS connection to get established
// The default is set to 20 seconds.
#mms.transport.ppp.timeout=

// Defines the Operating System. If this property is not set, jSMS auto-detects
// the Operating System.
// Set this property to "WIN" on Windows-Systems.
// Set this property to "LINUX", "UNIX" or "OSX" if your system uses a BSD-PPP
// daemon.
#mms.transport.ppp.os=WIN

// BSD-PPP settings (Linux/Unix/MacOSX)
// ------------------------------------
// This properties are only used on BSD-PPP systems.
// Used PPP peer file to create a GPRS connection to your MMS Relay/Server
// This file must exist in /etc/ppp/peers and must be readable by the user
// running jSMS.
mms.transport.ppp.bsd.peerfile=

// Path to the pppd binary, default is "/usr/sbin/pppd". On Solaris, the daemon
// is usually located in /usr/bin/pppd.
#mms.transport.ppp.bsd.daemon=

// jSMS looks for the following string from pppd to determine if the PPP link
// is established. If unset, it defaults to "remote IP address"
#ppp.bsd.connection.established=remote IP address


// RAS settings (windows)
// ----------------------
// The following settings have to be set if jSMS is running on a windows system.
// The userName your bearer requires.
mms.transport.ppp.ras.user=

// The password used to login to your bearers mmsNetwork
mms.transport.ppp.ras.password=

// Name of installed GPRS modem
mms.transport.ppp.ras.modem=

// Name of the ppp Interface
mms.transport.ppp.ras.interface=WAN (PPP/SLIP) Interface

// phone number of the GPRS connection. 
// default is [*99***1#] and will work in most cases.
#mms.transport.ppp.ras.phonenumber=*99***1#

// name of the dialup entry, default is [jSMS-Dialup]
// If this property is not set to another value, the dialup entry will 
// be renewed with every connection. If this property is set, jSMS
// will not change anything on the connection configuration.
mms.transport.ppp.ras.dialup.entry=jSMS-Dialup

// The route to the MMS-Gateway which will be added after dialing the connection. 
// If this entry is the same as the wapgateway, you 
// may use it as a variable like: ${mms.protocol.mm1.wapgateway}
mms.transport.ppp.ras.addroute=${mms.protocol.mm1.wapgateway}


// If this property is set to "true", jSMS will search for the PPP interface
// number and will use this information when adding a route to the WAP gateway.
// Defaults to "false".  If jSMS is unable to add a route to the WAP gateway,
// set this property to "true" and try again.
#ppp.ras.use_iface_for_route=true
